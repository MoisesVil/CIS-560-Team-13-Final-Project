@page
@using DataAccess.Models
@model Web_App.Pages.FantasyTeamModel
@{
    ViewData["Title"] = "Fantasy Team";
    ViewData["Subtitle"] = "Fantasy Team Information and Statistics";
}

<div class="container">
    <div class="card shadow-sm">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">Fantasy Teams</h2>
                <span class="badge badge-primary">Total: @Model.TotalFilteredCount</span>
            </div>
        </div>
        <div class="card-body">
            <!-- Filters -->
            <form method="get" class="row g-3 mb-4" id="filterForm">
                <div class="col-md-3">
                    <input type="text" class="form-control" placeholder="Search by team name" asp-for="SearchString" id="nameSearch" />
                </div>
                <div class="col-md-2">
                    <select class="form-select filter-control" asp-for="SortOrder">
                        <option value="">Sort By</option>
                        <option value="name">Team Name ↑</option>
                        <option value="name_desc">Team Name ↓</option>
                        <option value="points">Points ↑</option>
                        <option value="points_desc">Points ↓</option>
                        <option value="wins">Wins ↑</option>
                        <option value="wins_desc">Wins ↓</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <button type="button" class="btn btn-primary w-100" id="resetButton">Reset</button>
                </div>
            </form>

            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">
                                <a asp-page="/FantasyTeam" asp-route-sortOrder="@(Model.SortOrder == "name" ? "name_desc" : "name")" class="text-dark text-decoration-none">
                                    Team Name @(Model.SortOrder switch { "name" => "↑", "name_desc" => "↓", _ => "" })
                                </a>
                            </th>
                            <th scope="col">
                                <a asp-page="/FantasyTeam" asp-route-sortOrder="@(Model.SortOrder == "points" ? "points_desc" : "points")" class="text-dark text-decoration-none">
                                    Points @(Model.SortOrder switch { "points" => "↑", "points_desc" => "↓", _ => "" })
                                </a>
                            </th>
                            <th scope="col">
                                <a asp-page="/FantasyTeam" asp-route-sortOrder="@(Model.SortOrder == "wins" ? "wins_desc" : "wins")" class="text-dark text-decoration-none">
                                    Wins @(Model.SortOrder switch { "wins" => "↑", "wins_desc" => "↓", _ => "" })
                                </a>
                            </th>
                            <th scope="col">Losses</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.FantasyTeams.Any())
                        {
                            @foreach (FantasyTeam team in Model.FantasyTeams)
                            {
                                <tr>
                                    <td>@team.FantasyTeamID</td>
                                    <td><strong>@team.FantasyTeamName</strong></td>
                                    <td>@team.Wins</td>
                                    <td>@team.Losses</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-info-circle me-2"></i>No fantasy teams found
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        @{
                            const int pageRangeSize = 10;
                            int startPage = Math.Max(1, Model.CurrentPage - (pageRangeSize / 2));
                            int endPage = Math.Min(Model.TotalPages, startPage + pageRangeSize - 1);

                            if (endPage - startPage + 1 < pageRangeSize)
                            {
                                startPage = Math.Max(1, endPage - pageRangeSize + 1);
                            }
                        }

                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-page="/Player"
                               asp-route-currentPage="1"
                               asp-route-searchString="@Model.SearchString"
                               asp-route-teamFilter="@Model.TeamFilter"
                               asp-route-classFilter="@Model.ClassFilter"
                               asp-route-statusFilter="@Model.StatusFilter"
                               asp-route-sortOrder="@Model.SortOrder">
                                &laquo;
                            </a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" asp-page="/Player"
                               asp-route-currentPage="@(Model.CurrentPage - 1)"
                               asp-route-searchString="@Model.SearchString"
                               asp-route-teamFilter="@Model.TeamFilter"
                               asp-route-classFilter="@Model.ClassFilter"
                               asp-route-statusFilter="@Model.StatusFilter"
                               asp-route-sortOrder="@Model.SortOrder">
                                &lsaquo;
                            </a>
                        </li>

                        @if (startPage > 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-page="/Player"
                                   asp-route-currentPage="@i"
                                   asp-route-searchString="@Model.SearchString"
                                   asp-route-teamFilter="@Model.TeamFilter"
                                   asp-route-classFilter="@Model.ClassFilter"
                                   asp-route-statusFilter="@Model.StatusFilter"
                                   asp-route-sortOrder="@Model.SortOrder">@i</a>
                            </li>
                        }

                        @if (endPage < Model.TotalPages)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }

                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-page="/Player"
                               asp-route-currentPage="@(Model.CurrentPage + 1)"
                               asp-route-searchString="@Model.SearchString"
                               asp-route-teamFilter="@Model.TeamFilter"
                               asp-route-classFilter="@Model.ClassFilter"
                               asp-route-statusFilter="@Model.StatusFilter"
                               asp-route-sortOrder="@Model.SortOrder">
                                &rsaquo;
                            </a>
                        </li>
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-page="/Player"
                               asp-route-currentPage="@Model.TotalPages"
                               asp-route-searchString="@Model.SearchString"
                               asp-route-teamFilter="@Model.TeamFilter"
                               asp-route-classFilter="@Model.ClassFilter"
                               asp-route-statusFilter="@Model.StatusFilter"
                               asp-route-sortOrder="@Model.SortOrder">
                                &raquo;
                            </a>
                        </li>
                    </ul>
                </nav>
            }

        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('select.filter-control').forEach(control => {
            control.addEventListener('change', () => {
                document.getElementById('filterForm').submit();
            });
        });

        const nameSearch = document.getElementById('nameSearch');
        const filterForm = document.getElementById('filterForm');
        const hasValidSearchValue = () => nameSearch.value.trim() !== '';

        let previousSearchValue = nameSearch.value.trim();

        nameSearch.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const currentValue = nameSearch.value.trim();
                if (hasValidSearchValue() || (previousSearchValue !== '' && currentValue === '')) {
                    filterForm.submit();
                }
                previousSearchValue = currentValue;
            }
        });

        nameSearch.addEventListener('blur', () => {
            const currentValue = nameSearch.value.trim();
            if (hasValidSearchValue() || (previousSearchValue !== '' && currentValue === '')) {
                filterForm.submit();
            }
            previousSearchValue = currentValue;
        });

        nameSearch.addEventListener('input', () => {
            const currentValue = nameSearch.value.trim();
            if (previousSearchValue !== '' && currentValue === '') {
                filterForm.submit();
            }
            previousSearchValue = currentValue;
        });

        document.getElementById('resetButton').addEventListener('click', () => {
            document.querySelectorAll('select.filter-control').forEach(select => {
                select.selectedIndex = 0;
            });

            nameSearch.value = '';
            previousSearchValue = '';
            filterForm.submit();
        });
    </script>
}